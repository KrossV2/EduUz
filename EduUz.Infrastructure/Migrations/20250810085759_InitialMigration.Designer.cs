// <auto-generated />
using System;
using EduUz.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduUz.Infrastructure.Migrations
{
    [DbContext(typeof(EduUzDbContext))]
    [Migration("20250810085759_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EduUz.Core.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TimetableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TimetableId", "StudentId")
                        .IsUnique();

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.BehaviorRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("BehaviorRecords", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("HomeroomTeacherId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HomeroomTeacherId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1")
                        .IsUnique();

                    b.ToTable("Directors", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GradeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPendingApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("OriginalGradeId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginalGradeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherSubjectId");

                    b.ToTable("Grades", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TeacherSubjectId");

                    b.ToTable("Homeworks", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.LessonSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherSubjectId");

                    b.HasIndex("ClassId", "DayOfWeek", "LessonNumber")
                        .IsUnique();

                    b.ToTable("LessonSchedules", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1")
                        .IsUnique();

                    b.ToTable("Parents", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.ParentStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("ParentId", "StudentId")
                        .IsUnique();

                    b.ToTable("ParentStudents", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Regions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Andijon viloyati"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buxoro viloyati"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Farg'ona viloyati"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jizzax viloyati"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Xorazm viloyati"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Namangan viloyati"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Navoiy viloyati"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Qashqadaryo viloyati"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Qoraqalpog'iston Respublikasi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Samarqand viloyati"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sirdaryo viloyati"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Surxondaryo viloyati"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Toshkent shahri"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Toshkent viloyati"
                        });
                });

            modelBuilder.Entity("EduUz.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "System administrator",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "School director",
                            Name = "Director"
                        },
                        new
                        {
                            Id = 3,
                            Description = "School teacher",
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Student",
                            Name = "Student"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Parent of student",
                            Name = "Parent"
                        });
                });

            modelBuilder.Entity("EduUz.Core.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Schools", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1")
                        .IsUnique();

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adabiyot"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Algebra"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Biologiya"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Davlat va huquq asoslari"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fizika"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Geografiya"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Geometriya"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Informatika"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ingliz tili"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Iqtisod"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Jahon tarixi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Kimyo"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ona tili"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Rus tili"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Tarbiya"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Texnologiya"
                        },
                        new
                        {
                            Id = 17,
                            Name = "O'zbekiston tarixi"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Chizmachilik"
                        });
                });

            modelBuilder.Entity("EduUz.Core.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHomeroomTeacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1")
                        .IsUnique();

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId", "SubjectId")
                        .IsUnique();

                    b.ToTable("TeacherSubjects", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LessonScheduleId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("LessonScheduleId");

                    b.ToTable("Timetables", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("EduUz.Core.Models.Attendance", b =>
                {
                    b.HasOne("EduUz.Core.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.Timetable", "Timetable")
                        .WithMany("Attendances")
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("EduUz.Core.Models.BehaviorRecord", b =>
                {
                    b.HasOne("EduUz.Core.Models.Student", "Student")
                        .WithMany("BehaviorRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduUz.Core.Models.City", b =>
                {
                    b.HasOne("EduUz.Core.Models.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("EduUz.Core.Models.Class", b =>
                {
                    b.HasOne("EduUz.Core.Models.Teacher", "HomeroomTeacher")
                        .WithMany("HomeroomClasses")
                        .HasForeignKey("HomeroomTeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduUz.Core.Models.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeroomTeacher");

                    b.Navigation("School");
                });

            modelBuilder.Entity("EduUz.Core.Models.Director", b =>
                {
                    b.HasOne("EduUz.Core.Models.School", "School")
                        .WithOne()
                        .HasForeignKey("EduUz.Core.Models.Director", "SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("EduUz.Core.Models.Director", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.User", null)
                        .WithOne("Director")
                        .HasForeignKey("EduUz.Core.Models.Director", "UserId1");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduUz.Core.Models.Grade", b =>
                {
                    b.HasOne("EduUz.Core.Models.Grade", "OriginalGrade")
                        .WithMany()
                        .HasForeignKey("OriginalGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduUz.Core.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.TeacherSubject", "TeacherSubject")
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalGrade");

                    b.Navigation("Student");

                    b.Navigation("TeacherSubject");
                });

            modelBuilder.Entity("EduUz.Core.Models.Homework", b =>
                {
                    b.HasOne("EduUz.Core.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.TeacherSubject", "TeacherSubject")
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("TeacherSubject");
                });

            modelBuilder.Entity("EduUz.Core.Models.LessonSchedule", b =>
                {
                    b.HasOne("EduUz.Core.Models.Class", "Class")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.TeacherSubject", "TeacherSubject")
                        .WithMany()
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("TeacherSubject");
                });

            modelBuilder.Entity("EduUz.Core.Models.Notification", b =>
                {
                    b.HasOne("EduUz.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduUz.Core.Models.Parent", b =>
                {
                    b.HasOne("EduUz.Core.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("EduUz.Core.Models.Parent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.User", null)
                        .WithOne("Parent")
                        .HasForeignKey("EduUz.Core.Models.Parent", "UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduUz.Core.Models.ParentStudent", b =>
                {
                    b.HasOne("EduUz.Core.Models.Parent", "Parent")
                        .WithMany("Students")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.Student", "Student")
                        .WithMany("Parents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduUz.Core.Models.School", b =>
                {
                    b.HasOne("EduUz.Core.Models.City", "City")
                        .WithMany("Schools")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EduUz.Core.Models.Student", b =>
                {
                    b.HasOne("EduUz.Core.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("EduUz.Core.Models.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.User", null)
                        .WithOne("Student")
                        .HasForeignKey("EduUz.Core.Models.Student", "UserId1");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduUz.Core.Models.Teacher", b =>
                {
                    b.HasOne("EduUz.Core.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("EduUz.Core.Models.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.User", null)
                        .WithOne("Teacher")
                        .HasForeignKey("EduUz.Core.Models.Teacher", "UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduUz.Core.Models.TeacherSubject", b =>
                {
                    b.HasOne("EduUz.Core.Models.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduUz.Core.Models.Timetable", b =>
                {
                    b.HasOne("EduUz.Core.Models.LessonSchedule", "LessonSchedule")
                        .WithMany()
                        .HasForeignKey("LessonScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonSchedule");
                });

            modelBuilder.Entity("EduUz.Core.Models.User", b =>
                {
                    b.HasOne("EduUz.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduUz.Core.Models.School", "School")
                        .WithMany("Users")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");

                    b.Navigation("School");
                });

            modelBuilder.Entity("EduUz.Core.Models.City", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("EduUz.Core.Models.Class", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduUz.Core.Models.Parent", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduUz.Core.Models.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("EduUz.Core.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EduUz.Core.Models.School", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EduUz.Core.Models.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("BehaviorRecords");

                    b.Navigation("Grades");

                    b.Navigation("Parents");
                });

            modelBuilder.Entity("EduUz.Core.Models.Subject", b =>
                {
                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("EduUz.Core.Models.Teacher", b =>
                {
                    b.Navigation("HomeroomClasses");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("EduUz.Core.Models.Timetable", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("EduUz.Core.Models.User", b =>
                {
                    b.Navigation("Director")
                        .IsRequired();

                    b.Navigation("Parent")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("Teacher")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
